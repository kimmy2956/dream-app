import OpenAI from "openai";

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { dream } = req.body;
    if (!dream) return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô" });

    const prompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô: "${dream}"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏™‡πà‡∏ß‡∏ô:
1. üìñ ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
2. üé≤ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î (2-3 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
`;

    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
    });

    const text = completion.choices[0].message.content || "";

    const meaningMatch = text.match(/‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢[:Ôºö](.*?)(?=‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î|$)/s);
    const numberMatch = text.match(/‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î[:Ôºö](.*)/s);

    res.status(200).json({
      meaning: meaningMatch ? meaningMatch[1].trim() : text,
      numbers: numberMatch ? numberMatch[1].trim() : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î",
    });

  } catch (err) {
    console.error("API Error:", err);
    res.status(500).json({
      error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      details: err.message || err.toString(),
    });
  }
}
